Terminals unused in grammar

   '['
   ']'
   '{'
   '}'


Grammar

    0 $accept: lst $end

    1 lst: LNAME EQ T

    2 T: OPEN_SQ CLOS_SQ
    3  | OPEN_SQ DICT CLOS_SQ

    4 DICT: OPEN_BR REP_PAIR CLOS_BR
    5     | OPEN_BR REP_PAIR CLOS_BR COMMA X
    6     | OPEN_BR CLOS_BR COMMA X
    7     | OPEN_BR CLOS_BR

    8 X: DICT
    9  | /* empty */

   10 REP_PAIR: PAIR
   11         | PAIR COMMA Y

   12 Y: REP_PAIR
   13  | /* empty */

   14 LNAME: VAR
   15      | CHECK

   16 CHECK: RESK


Terminals, with rules where they appear

$end (0) 0
'[' (91)
']' (93)
'{' (123)
'}' (125)
error (256)
VAR (258) 14
PAIR (259) 10 11
OPEN_SQ (260) 2 3
CLOS_SQ (261) 2 3
EQ (262) 1
OPEN_BR (263) 4 5 6 7
CLOS_BR (264) 4 5 6 7
COMMA (265) 5 6 11
RESK (266) 16


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
lst (17)
    on left: 1, on right: 0
T (18)
    on left: 2 3, on right: 1
DICT (19)
    on left: 4 5 6 7, on right: 3 8
X (20)
    on left: 8 9, on right: 5 6
REP_PAIR (21)
    on left: 10 11, on right: 4 5 12
Y (22)
    on left: 12 13, on right: 11
LNAME (23)
    on left: 14 15, on right: 1
CHECK (24)
    on left: 16, on right: 15


state 0

    0 $accept: . lst $end

    VAR   shift, and go to state 1
    RESK  shift, and go to state 2

    lst    go to state 3
    LNAME  go to state 4
    CHECK  go to state 5


state 1

   14 LNAME: VAR .

    $default  reduce using rule 14 (LNAME)


state 2

   16 CHECK: RESK .

    $default  reduce using rule 16 (CHECK)


state 3

    0 $accept: lst . $end

    $end  shift, and go to state 6


state 4

    1 lst: LNAME . EQ T

    EQ  shift, and go to state 7


state 5

   15 LNAME: CHECK .

    $default  reduce using rule 15 (LNAME)


state 6

    0 $accept: lst $end .

    $default  accept


state 7

    1 lst: LNAME EQ . T

    OPEN_SQ  shift, and go to state 8

    T  go to state 9


state 8

    2 T: OPEN_SQ . CLOS_SQ
    3  | OPEN_SQ . DICT CLOS_SQ

    CLOS_SQ  shift, and go to state 10
    OPEN_BR  shift, and go to state 11

    DICT  go to state 12


state 9

    1 lst: LNAME EQ T .

    $default  reduce using rule 1 (lst)


state 10

    2 T: OPEN_SQ CLOS_SQ .

    $default  reduce using rule 2 (T)


state 11

    4 DICT: OPEN_BR . REP_PAIR CLOS_BR
    5     | OPEN_BR . REP_PAIR CLOS_BR COMMA X
    6     | OPEN_BR . CLOS_BR COMMA X
    7     | OPEN_BR . CLOS_BR

    PAIR     shift, and go to state 13
    CLOS_BR  shift, and go to state 14

    REP_PAIR  go to state 15


state 12

    3 T: OPEN_SQ DICT . CLOS_SQ

    CLOS_SQ  shift, and go to state 16


state 13

   10 REP_PAIR: PAIR .
   11         | PAIR . COMMA Y

    COMMA  shift, and go to state 17

    $default  reduce using rule 10 (REP_PAIR)


state 14

    6 DICT: OPEN_BR CLOS_BR . COMMA X
    7     | OPEN_BR CLOS_BR .

    COMMA  shift, and go to state 18

    $default  reduce using rule 7 (DICT)


state 15

    4 DICT: OPEN_BR REP_PAIR . CLOS_BR
    5     | OPEN_BR REP_PAIR . CLOS_BR COMMA X

    CLOS_BR  shift, and go to state 19


state 16

    3 T: OPEN_SQ DICT CLOS_SQ .

    $default  reduce using rule 3 (T)


state 17

   11 REP_PAIR: PAIR COMMA . Y

    PAIR  shift, and go to state 13

    $default  reduce using rule 13 (Y)

    REP_PAIR  go to state 20
    Y         go to state 21


state 18

    6 DICT: OPEN_BR CLOS_BR COMMA . X

    OPEN_BR  shift, and go to state 11

    $default  reduce using rule 9 (X)

    DICT  go to state 22
    X     go to state 23


state 19

    4 DICT: OPEN_BR REP_PAIR CLOS_BR .
    5     | OPEN_BR REP_PAIR CLOS_BR . COMMA X

    COMMA  shift, and go to state 24

    $default  reduce using rule 4 (DICT)


state 20

   12 Y: REP_PAIR .

    $default  reduce using rule 12 (Y)


state 21

   11 REP_PAIR: PAIR COMMA Y .

    $default  reduce using rule 11 (REP_PAIR)


state 22

    8 X: DICT .

    $default  reduce using rule 8 (X)


state 23

    6 DICT: OPEN_BR CLOS_BR COMMA X .

    $default  reduce using rule 6 (DICT)


state 24

    5 DICT: OPEN_BR REP_PAIR CLOS_BR COMMA . X

    OPEN_BR  shift, and go to state 11

    $default  reduce using rule 9 (X)

    DICT  go to state 22
    X     go to state 25


state 25

    5 DICT: OPEN_BR REP_PAIR CLOS_BR COMMA X .

    $default  reduce using rule 5 (DICT)
